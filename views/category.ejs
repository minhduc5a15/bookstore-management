<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/head.ejs') %>
    <title>BookBuddy - Category</title>
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            font-size: 14px;
        }

        .category-header {
            background-color: var(--primary-color);
            color: white;
            text-align: center;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        h1 {
            margin-bottom: 1rem;
            font-size: 2.5rem;
        }

        .filters {
            background-color: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
            font-size: 14px;
        }

        .filter-item {
            flex: 1;
            min-width: 200px;
            font-size: 14px;

        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: var(--primary-color);
            font-size: 14px;

        }

        select,
        input:not([id="search-box"]) {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid var(--secondary-color);
            border-radius: 5px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
            height: 4rem;
        }

        select:focus,
        input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .book-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 2rem;
        }

        .book-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
        }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .book-cover {
            width: 100%;
            height: 250px;
            object-fit: cover;
        }

        .book-info {
            padding: 1rem;
        }

        .book-title {
            font-size: 1.3rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .book-author {
            font-size: 1rem;
            color: #666;
            margin-bottom: 0.5rem;
        }

        .book-price {
            font-weight: bold;
            color: var(--primary-color);
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 2rem;
        }

        .pagination button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            margin: 0 0.5rem;
            cursor: pointer;
            border-radius: 5px;
            font-size: 1.2rem;
            transition: background-color 0.3s ease, transform 0.1s ease;
        }

        .pagination button:hover {
            background-color: #E85A2A;
            transform: translateY(-2px);
        }

        .pagination button:active {
            transform: translateY(0);
        }

        .pagination button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        #bookCount {
            text-align: center;
            margin-top: 0.2rem;
            line-height: 1.2rem;
            font-size: 1.2rem;
            color: var(--primary-color);
        }

        @media (max-width: 768px) {
            .filter-group {
                flex-direction: column;
            }

            .filter-item {
                width: 100%;
            }
        }
    </style> 
</head>

<body>
    <%- include('./partials/header.ejs') %>
    <div class="container">
        <div class="filters">
            <div class="filter-group">
                <div class="filter-item">
                    <label for="category">Category:</label>
                    <select id="category">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label for="price">Max Price:</label>
                    <input type="range" id="price" min="0" max="50" step="1" value="50">
                    <output for="price" id="priceOutput">$50</output>
                </div>
            </div>
            <div class="filter-group">
                <div class="filter-item">
                    <label for="search">Search:</label>
                    <input type="text" id="search" placeholder="Search by title or author">
                </div>
            </div>
        </div>
        <div id="bookCount"></div>
        <div class="book-grid" id="bookGrid">
            <!-- Books will be dynamically inserted here -->
        </div>
        <div class="pagination">
            <button id="prevPage" disabled>Previous</button>
            <button id="nextPage">Next</button>
        </div>
    </div>
    <script>
        fetchBooks().then(() => {
            const booksPerPage = 25;
            let allCategories = new Set();

            books.forEach(book => {
                book.categories.forEach(category => {
                    allCategories.add(category);
                })
            })

            const categorySelect = document.getElementById('category');

            allCategories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.innerHTML = category[0].toUpperCase() + category.slice(1);
                categorySelect.appendChild(option);
            })

            let currentPage = 1;
            let filteredBooks = [...books];

            const bookGrid = document.getElementById('bookGrid');
            const prevPageBtn = document.getElementById('prevPage');
            const nextPageBtn = document.getElementById('nextPage');
            const priceInput = document.getElementById('price');
            const priceOutput = document.getElementById('priceOutput');
            const searchInput = document.getElementById('search');
            const bookCountElement = document.getElementById('bookCount');

            function displayBooks() {
                const startIndex = (currentPage - 1) * booksPerPage;
                const endIndex = startIndex + booksPerPage;
                const booksToDisplay = filteredBooks.slice(startIndex, endIndex);

                bookGrid.innerHTML = '';

                booksToDisplay.forEach(book => {
                    const bookCard = document.createElement('a');
                    bookCard.href = `/book/detail/${encodeURIComponent(book.id)}`
                    bookCard.className = 'book-card';
                    bookCard.innerHTML = `
                        <img src="${origin}/api/image/${book.thumbnailId}" alt="${book.title}" class="book-cover">
                        <div class="book-info">
                            <h3 class="book-title">${book.title}</h3>
                            <p class="book-author">${book.authors.join(', ')}</p>
                            <p class="book-price">$${book.price}</p>
                        </div>
                    `;
                    bookGrid.appendChild(bookCard);
                });

                updatePaginationButtons();
                updateBookCount();
            }

            function updatePaginationButtons() {
                prevPageBtn.disabled = currentPage === 1;
                nextPageBtn.disabled = currentPage === Math.ceil(filteredBooks.length / booksPerPage);
            }

            function updateBookCount() {
                bookCountElement.textContent = `Showing ${filteredBooks.length} book${filteredBooks.length !== 1 ? 's' : ''}`;
            }

            function applyFilters() {
                const category = categorySelect.value.toLowerCase();
                const maxPrice = parseFloat(priceInput.value);
                const searchTerm = searchInput.value.toLowerCase();

                filteredBooks = books.filter(book => {
                    const matchesCategory = !category || book.categories.some(cat => cat.toLowerCase() === category);
                    const matchesPrice = parseFloat(book.price) <= maxPrice;
                    const matchesSearch = book.title.toLowerCase().includes(searchTerm) || book.authors.some(author => author.toLowerCase().includes(searchTerm));
                    return matchesCategory && matchesPrice && matchesSearch;
                });

                currentPage = 1;
                displayBooks();
            }

            prevPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayBooks();
                }
            });

            nextPageBtn.addEventListener('click', () => {
                if (currentPage < Math.ceil(filteredBooks.length / booksPerPage)) {
                    currentPage++;
                    displayBooks();
                }
            });
            categorySelect.addEventListener('change', applyFilters);
            priceInput.addEventListener('input', () => {
                priceOutput.textContent = `$${priceInput.value}`;
                applyFilters();
            });
            searchInput.addEventListener('input', applyFilters);

            displayBooks();
        })
    </script>
    <%- include('./partials/footer.ejs') %>
</body>

</html>